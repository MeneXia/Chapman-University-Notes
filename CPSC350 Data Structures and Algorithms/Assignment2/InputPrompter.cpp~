#include "InputHandler.h"
InputHandler::InputHandler(){}
InputHandler::~InputHandler() {}
int InputHandler::promptOptionInt(string promptMsg, string optionName, int numOptions) {
	cout<<promptMsg;
	string inputStr;
	int inputNum;
	while (true) {
		cin>>inputStr;
		if (isMalformedInt(inputStr)) continue;
		inputNum = atoi(inputStr.c_str());
		for (int i=0; i<numOptions; ++i) {
			if (inputNum != i) {
				cout<<"Invalid "<<optionName<<". Try again: ";
				continue;
			}
		}
		return inputNum;
	}
}
int InputHandler::promptInt(string promptMsg) {
	cout<<promptMsg;
	string inputStr;
	int inputNum;
	while (true) {
		cin>>inputStr;
		if (isMalformedInt(inputStr)) {
			cout<<"Malformed int. Try again: ";
			continue;
		}
		inputNum = atoi(inputStr.c_str());
		return inputNum;
	}
}
double InputHandler::promptDouble(string promptMsg) {
	cout<<promptMsg;
	string inputStr;
	double inputNum;
	while (true) {
		cin>>inputStr;
		if (isMalformedFloat(inputStr)) {
			cout<<"Malformed int. Try again: ";
			continue;
		}
		inputNum = atoi(inputStr.c_str());
		return inputNum;
	}
}
bool InputHandler::isMalformedInt(string input) {
	for (int i=0; i<input.size(); ++i) {
		if (!isdigit(input[i])) {
			return true;
		}
	}
	return false;
}
bool InputHandler::isMalformedFloat(string input) {
	bool hasPoint = false;
	for (int i=0; i<input.size(); ++i) {
		if (hasPoint) {
			return true;
		}
		if (input[i] == '.') {
			hasPoint = true;
			continue;
		}
		if (!isdigit(input[i])) {
			return true;
		}
	}
	return false;
}
