#include "LifeGrid.h"
#include "InputHandler.h"
using namespace std;
int main(int argc, char** argv) {
	// Prompt for settings
	InputHandler ih;
	int modeNum = ih.promptOptionInt("Classic (0), Doughnut (1) or Mirror Mode (2): ","mode",3);
	int inputNum = ih.promptOptionInt("Map file (0) or random assignment (1): ","input type",2);
	int outputNum = ih.promptOptionInt("Print generations to console with brief pause (0) or print generations to file (1)?","output type",2);

	// LifeGrid pointer
	LifeGrid *lg;

	// If map file is chosen
	if (inputNum == 0) {
		// Init and prompt for file
		ifstream f;
		string iFilePath = ih.promptPath("Enter path of map file: ");
		// File exists after this line, so open it
		f.open(iFilePath.c_str());

		// Get the height and width from the first two lines
		//TODO: check if bad file
		string line;
		getline(f, line);
		int height;
		height = atoi(line.c_str());
		getline(f, line);
		int width;
		width = atoi(line.c_str());

		// Init LifeGrid and have pointer point to it
		LifeGrid lgInit(modeNum, height, width);
		lg = &lgInit;

		cout<<"Generating initial map..."<<endl;

		// Generate the initial map
		lg->makeInitialMap(f);
		f.close();

	// If random assignment is chosen
	} else if (inputNum == 1) {
		// Prompt for height, width and density
		int height = ih.promptInt("Enter map height: ");
		int width = ih.promptInt("Enter map width: ");

		// Init LifeGrid and have pointer point to it
		LifeGrid lgInit(modeNum, height, width);
		lg = &lgInit;

		double density = ih.promptDouble("Enter initial population density (0<c<=1): ");
		
		cout<<"Generating initial map..."<<endl;

		// Generate the initial map
		lg->makeInitialMap(density);
	}

	// If print to console is chosen
	if (outputNum == 0) {
		while (!lg->isEmpty()) {
			lg->printGenerationNumber();
			lg->printCurrentGeneration();
			cout<<"Press [Enter] to continue..."<<endl;
			cin.ignore();
			lg->makeNextGeneration();
		}

	// If print to file is chosen
	} else if (outputNum == 1) {
		// Prompt for file name
		cout<<"Enter output file name: ";
		string oFileName;
		cin>>oFileName;
		lg->printGenerationsToFile(oFileName);
	}

	return 0;
}
